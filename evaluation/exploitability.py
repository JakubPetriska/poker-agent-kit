import itertools

import numpy as np

from response.best_response import BestResponse
from evaluation.player_utility import PlayerUtility


class Exploitability:
    """Calculates exploitability of strategy by computing best response,
    than computing the game value and than computing the exploitability
    for each player position by taking the difference between game value
    of the strategy and the best response.The returned exploitability is in mbb/g.
    """

    def __init__(self, game):
        self.game = game
        if game.get_num_players() != 2:
            raise AttributeError(
                'Only games with two players are supported')
        self.big_blind = None
        for i in range(game.get_num_players()):
            player_blind = game.get_blind(i)
            if self.big_blind == None or player_blind > self.big_blind:
                self.big_blind = player_blind
        self.best_response = BestResponse(game)
        self.player_utility = PlayerUtility(game)

    def evaluate(self, strategy):
        best_response = self.best_response.solve(strategy)
        player_utilities, positions = self.player_utility.evaluate(strategy, best_response)
        opponent_utilities_mean = np.mean([player_utilities[i, positions[i, 1]] for i in range(len(player_utilities))])
        return opponent_utilities_mean * 1000 * self.big_blind
